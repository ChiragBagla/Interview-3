1. 写一个程序，模拟投硬币的过程，每次投硬币，直到出现正面为止，返回之前出现
反面的次数
2. 重复N次上述的过程，问一共出现多少次反面
3. 将这个模拟过程写成一个类，并写成singleton class
4. 让你改进一个google的产品，你选择什么，怎么改进
5. Given a binary tree, find 2 leaf nodes say X and Y such that F(X,Y) is
maximum where F(X,Y) = sum of nodes in the path from root to X + sum of
nodes in the path from root to Y - sum of nodes in the common path from root
to first common ancestor of the Nodes X and Y

针对完全二叉树，写了一个O(N)的DP version, 自底向上计算，一次扫描完成。
- 因为是完全二叉树，节点值保存在数组a里，N = 2^k-1
- 这个version可以计算负数的情况。
- low[i]: 节点i的第二最佳路径, individual部分
- high[i]: 节点i的最佳路径，individual部分
- common[i]：节点i的两条最佳路径公共部分

public int F(int[] a) {
        int N = a.length;
        int[] low = new int[N];
        int[] high = new int[N];
        int[] common = new int[N];

        for (int i = N - 1; i >= N / 2; i--) {
            high[i] = a[i];
            low[i] = Integer.MIN_VALUE;
        }

        for (int i = N / 2 - 1; i >= 0; i--) {
            int left = i * 2 + 1;
            int right = i * 2 + 2;
            int s = high[left]+common[left] > high[right]+common[right] ?
left : right;
            int t = high[left]+common[left] > high[right]+common[right] ?
right : left;

            if (low[s] > high[t] + common[t]) {
                low[i] = low[s];
                high[i] = high[s];
                common[i] = common[s] + a[i];
            } else {
                low[i] = high[t] + common[t];
                high[i] = high[s] + common[s];
                common[i] = a[i];
            }
        }

        return low[0] + high[0] + common[0];
    }

Initial Onsite，
题目：Facebook HackerCup Round 1 的 Squished Status，比这个还简单些
告诉他做过了，DP就行，他就说那些解法是O(N) Space的，O(1)空间怎么解，
于是把公式写出来，顺便程序也写出来，
然后很霸气的告诉他，这种简单的题目没想过O(N)的，他镇精了

随后Open题，一个分布式系统，每次要把一个新的 OS binary file 有 100MB，
deploy 到所有机器里，大概百万台，
怎么设计一个系统。
这个新题，正好想到了Gossip，
于是扯了一通 Gossip 算法，给出复杂度O(LogN) 就可以发送完，
随后发现由于带宽限制，网络拓扑结构已知，所以Gossip 不好，
抄袭 mapReduce 的框架，设计了一个有 Master 节点的 Gossip 算法

给你一个函数 bool Prob() ，有50%的概率返回 True，50%的概率返回
False
请你用写一个新的函数：bool Prob2(double p)
要求  p 的概率返回 True， 1 - p 的概率返回 False
当然，肯定使用 Prob 了

这题我用的2分法，花了不少时间，，
然后问了fibonacci的 O(1) Space 或者 O(N) time 的解法，
Onsite 老题新酒，直方图，天上下雨，求能存多少水
E.G:
  3,1,5 => 2
  3,1,0,5 => 5
很假单的O(N)扫描就行

扩展是改成Online的算法，就是说：
有些地方高度随时会变，
E.G.
  3,1,5 => 3,0,5 => 3
  3,1,0,5 => 3,3,0,5 => 3
设计一个算法，最快的返回改变高度之后的结果

Two reverse sorted arrays A and B have been given.
such that size of A is m and size of B is n
You need to find the k th largest sum (a+b) where a is taken from A and b is
taken from B. such that k < m*n


1. E(Xi)=1/2 + 1/4 + 1/8 + ... = 1
2. E(Xn) = SUM_i(E(Xi) = N


